{"ast":null,"code":"import { filter, interval, mergeMap, Subject, takeUntil, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/money.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"../child/child.component\";\nfunction ParentComponent_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ParentComponent_button_2_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const child_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.sendMoney(child_r3));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Send Money to \", child_r3.name, \"\\n\");\n  }\n}\nfunction ParentComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ParentComponent_button_3_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const child_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.getMoney(child_r6));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Get Money from \", child_r6.name, \"\\n\");\n  }\n}\nfunction ParentComponent_app_child_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-child\", 6);\n    i0.ɵɵlistener(\"moneyChanged\", function ParentComponent_app_child_7_Template_app_child_moneyChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onMoneyChanged($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"name\", child_r9.name)(\"money\", child_r9.money)(\"fxFlex\", ctx_r2.calculateFlex(child_r9));\n  }\n}\nexport class ParentComponent {\n  constructor(moneyService) {\n    this.moneyService = moneyService;\n    this.children = [{\n      name: 'Jack',\n      money: 10\n    }, {\n      name: 'Jill',\n      money: 15\n    }];\n    this.direction = 'column';\n    this.destroyed$ = new Subject();\n  }\n  ngOnInit() {\n    this.moneyService.sendMoneyToChild('Jack', 10);\n    //Send money to all childern Automatically after every 1 minute\n    this.sendMoneyAutomatically();\n    this.moneyService.sendMoneyToChildSource.pipe(filter(source => !!source),\n    // ignore initial null value\n    tap(({\n      childName,\n      amount\n    }) => {\n      const child = this.children.find(c => c.name === childName);\n      child && (child.money += amount);\n    })).subscribe();\n  }\n  onMoneyChanged(data) {\n    // We are Receiving money from child component and updating in the parent\n    this.children.map(x => x.name == data.name ? x.money = data.money : '');\n  }\n  sendMoney(child) {\n    //Sending direct money to specific child\n    child.money += 10;\n  }\n  getMoney(child) {\n    //Getting direct money from specific child\n    child.money -= 10;\n  }\n  getMoneyFromAll() {\n    //Getting direct money from all child\n    this.children.map(x => x.money = x.money - 10);\n  }\n  calculateFlex(child) {\n    //Calculating the flex direction\n    const totalMoney = this.children.reduce((acc, curr) => acc + curr.money, 0);\n    const childMoneyRatio = child.money / totalMoney;\n    return `${childMoneyRatio * 100}%`;\n  }\n  onDirectionChange(event) {\n    console.log(this.direction, event);\n  }\n  sendMoneyAutomatically() {\n    interval(60000) // emit a value every 1 minute\n    .pipe(mergeMap(() => {\n      // send money to all child components\n      return this.children.map(child => {\n        return this.moneyService.sendMoneyToChild(child.name, 10);\n      });\n    }), takeUntil(this.destroyed$) // complete the Observable when the component is destroyed\n    ).subscribe(() => console.log('Money sent automatically.'));\n  }\n  ngOnDestroy() {\n    this.destroyed$.next('');\n  }\n}\nParentComponent.ɵfac = function ParentComponent_Factory(t) {\n  return new (t || ParentComponent)(i0.ɵɵdirectiveInject(i1.MoneyService));\n};\nParentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ParentComponent,\n  selectors: [[\"app-parent\"]],\n  decls: 15,\n  vars: 6,\n  consts: [[3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [3, \"fxLayout\"], [3, \"name\", \"money\", \"fxFlex\", \"moneyChanged\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"radio\", \"name\", \"direction\", \"value\", \"column\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"radio\", \"name\", \"direction\", \"value\", \"row\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"name\", \"money\", \"fxFlex\", \"moneyChanged\"]],\n  template: function ParentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Parent Component\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ParentComponent_button_2_Template, 2, 1, \"button\", 0);\n      i0.ɵɵtemplate(3, ParentComponent_button_3_Template, 2, 1, \"button\", 0);\n      i0.ɵɵelementStart(4, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function ParentComponent_Template_button_click_4_listener() {\n        return ctx.getMoneyFromAll();\n      });\n      i0.ɵɵtext(5, \"Get Money From All Children\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 2);\n      i0.ɵɵtemplate(7, ParentComponent_app_child_7_Template, 1, 3, \"app-child\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\")(9, \"label\")(10, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function ParentComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.direction = $event;\n      })(\"change\", function ParentComponent_Template_input_change_10_listener($event) {\n        return ctx.onDirectionChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \" Column \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"label\")(13, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ParentComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.direction = $event;\n      })(\"change\", function ParentComponent_Template_input_change_13_listener($event) {\n        return ctx.onDirectionChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \" Row \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.children);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.children);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"fxLayout\", ctx.direction);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.children);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.direction);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.direction);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgModel, i4.DefaultLayoutDirective, i4.DefaultFlexDirective, i5.ChildComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["filter","interval","mergeMap","Subject","takeUntil","tap","i0","ParentComponent","constructor","moneyService","name","money","ngOnInit","sendMoneyToChild","sendMoneyAutomatically","sendMoneyToChildSource","pipe","source","childName","amount","child","children","find","c","subscribe","onMoneyChanged","data","map","x","sendMoney","getMoney","getMoneyFromAll","calculateFlex","totalMoney","reduce","acc","curr","childMoneyRatio","onDirectionChange","event","console","log","direction","destroyed$","ngOnDestroy","next","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/ahmadsiddiqui/Documents/Personal/Outline Systems India-test/parent-child-angular-test/src/app/parent/parent.component.ts","/Users/ahmadsiddiqui/Documents/Personal/Outline Systems India-test/parent-child-angular-test/src/app/parent/parent.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { filter, interval, mergeMap, Subject, takeUntil, tap } from 'rxjs';\nimport { MoneyService } from '../service/money.service';\n\n@Component({\n  selector: 'app-parent',\n  templateUrl: './parent.component.html',\n  styleUrls: ['./parent.component.scss'],\n})\nexport class ParentComponent implements OnInit, OnDestroy {\n  children = [\n    { name: 'Jack', money: 10 },\n    { name: 'Jill', money: 15 },\n  ];\n  direction = 'column';\n  destroyed$ = new Subject();\n\n  constructor(private moneyService: MoneyService) {}\n\n  ngOnInit() {\n    this.moneyService.sendMoneyToChild('Jack', 10);\n    //Send money to all childern Automatically after every 1 minute\n    this.sendMoneyAutomatically();\n\n    this.moneyService.sendMoneyToChildSource\n      .pipe(\n        filter((source) => !!source), // ignore initial null value\n        tap(({ childName, amount }) => {\n          const child = this.children.find((c) => c.name === childName);\n          child && (child.money += amount);\n        })\n      )\n      .subscribe();\n  }\n\n  onMoneyChanged(data: any) {\n    // We are Receiving money from child component and updating in the parent\n    this.children.map((x) =>\n      x.name == data.name ? (x.money = data.money) : ''\n    );\n  }\n\n  sendMoney(child: { money: number }) {\n    //Sending direct money to specific child\n    child.money += 10;\n  }\n\n  getMoney(child: { money: number }) {\n    //Getting direct money from specific child\n    child.money -= 10;\n  }\n\n  getMoneyFromAll() {\n    //Getting direct money from all child\n    this.children.map((x) => (x.money = x.money - 10));\n  }\n\n  calculateFlex(child: { money: number }): string {\n    //Calculating the flex direction\n    const totalMoney = this.children.reduce((acc, curr) => acc + curr.money, 0);\n    const childMoneyRatio = child.money / totalMoney;\n    return `${childMoneyRatio * 100}%`;\n  }\n\n  onDirectionChange(event: any) {\n    console.log(this.direction, event);\n  }\n\n  sendMoneyAutomatically() {\n    interval(60000) // emit a value every 1 minute\n      .pipe(\n        mergeMap(() => {\n          // send money to all child components\n          return this.children.map((child) => {\n            return this.moneyService.sendMoneyToChild(child.name, 10);\n          });\n        }),\n        takeUntil(this.destroyed$) // complete the Observable when the component is destroyed\n      )\n      .subscribe(() => console.log('Money sent automatically.'));\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next('');\n  }\n}\n","<h2>Parent Component</h2>\n<!-- <div>\n  <app-child\n    *ngFor=\"let child of children\"\n    [name]=\"child.name\"\n    [money]=\"child.money\"\n  ></app-child>\n</div>\n<button *ngFor=\"let child of children\" (click)=\"sendMoney(child)\">\n  Send Money to {{ child.name }}\n</button>\n<button *ngFor=\"let child of children\" (click)=\"getMoney(child)\">\n  Get Money from {{ child.name }}\n</button> -->\n\n<!-- <div>\n  <mat-radio-group [(ngModel)]=\"direction\">\n    <mat-radio-button value=\"row\">Row</mat-radio-button>\n    <mat-radio-button value=\"column\">Column</mat-radio-button>\n  </mat-radio-group>\n</div> -->\n<button *ngFor=\"let child of children\" (click)=\"sendMoney(child)\">\n  Send Money to {{ child.name }}\n</button>\n<button *ngFor=\"let child of children\" (click)=\"getMoney(child)\">\n  Get Money from {{ child.name }}\n</button>\n<button (click)=\"getMoneyFromAll()\">Get Money From All Children</button>\n<div [fxLayout]=\"direction\">\n  <app-child\n    *ngFor=\"let child of children\"\n    [name]=\"child.name\"\n    [money]=\"child.money\"\n    [fxFlex]=\"calculateFlex(child)\"\n    (moneyChanged)=\"onMoneyChanged($event)\"\n  >\n  </app-child>\n</div>\n\n<div>\n  <label>\n    <input\n      type=\"radio\"\n      name=\"direction\"\n      value=\"column\"\n      [(ngModel)]=\"direction\"\n      (change)=\"onDirectionChange($event)\"\n    />\n    Column\n  </label>\n  <label>\n    <input\n      type=\"radio\"\n      name=\"direction\"\n      value=\"row\"\n      [(ngModel)]=\"direction\"\n      (change)=\"onDirectionChange($event)\"\n    />\n    Row\n  </label>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}